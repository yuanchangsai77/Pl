#OD197欢乐的周末
from collections import deque
import copy

def bfs(m, n, start, grid):
    queue = deque([start])
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    grid[start[0]][start[1]] = -1
    reachable = set([start])  

    while queue:
        x, y = queue.popleft()
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != 1 and grid[nx][ny] != -1:
                grid[nx][ny] = -1  
                reachable.add((nx, ny))
                queue.append((nx, ny))
    return reachable

def happyweek(m, n, grid):
    start1 = start2 = None
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 2:
                if not start1:
                    start1 = (i, j)
                else:
                    start2 = (i, j)
    #grid_clone = [row[:] for row in grid]
    grid_clone1 = copy.deepcopy(grid)
    grid_clone2 = copy.deepcopy(grid) 
    reachable1 = bfs(m, n, start1, grid_clone1)
    reachable2 = bfs(m, n, start2, grid_clone2)
    res = 0
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 3 and (i, j) in reachable1 and (i, j) in reachable2:
                res += 1
    return res

m, n = map(int, input().strip().split())
grid = []
for _ in range(m):
    grid.append(list(map(int, input().strip().split())))
print(happyweek(m, n, grid))

#gpt
from collections import deque
import copy  # 导入copy模块用于深复制

def bfs(start, grid, m, n):
    queue = deque([start])
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    visited = [[False] * n for _ in range(m)]  # 创建访问标记矩阵
    visited[start[0]][start[1]] = True
    reachable = set([start])  # 添加起点为可达

    while queue:
        x, y = queue.popleft()
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] != 1:
                visited[nx][ny] = True  # 标记为已访问
                if grid[nx][ny] == 3 or grid[nx][ny] == 0:  # 仅关注通路和聚餐地点
                    reachable.add((nx, ny))
                queue.append((nx, ny))
    return reachable

def happyweek(m, n, grid):
    # 查找起点
    starts = []
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 2:
                starts.append((i, j))
                if len(starts) == 2:
                    break
        if len(starts) == 2:
            break

    # 对每个起点执行BFS
    results = []
    for start in starts:
        cloned_grid = copy.deepcopy(grid)  # 深克隆地图
        results.append(bfs(start, cloned_grid, m, n))

    # 计算两个结果的交集
    res = 0
    intersection = results[0].intersection(results[1])
    for pos in intersection:
        if grid[pos[0]][pos[1]] == 3:
            res += 1

    return res

m, n = map(int, input().strip().split())
grid = [list(map(int, input().strip().split())) for _ in range(m)]
print(happyweek(m, n, grid))
