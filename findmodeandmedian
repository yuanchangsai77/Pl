#OD212查找众数及中位数
def findmode(s):
    res=[]
    count={}
    for k in s:
        if k in count:
            count[k]+=1
        else:
            count[k]=1
    maxcount=max(count.values())
    for item in count.keys():
        if count[item]==maxcount:
            res.append(item)
    return res

def findmedian(ns):
    ns.sort()
    if len(ns)%2==0:
        return (ns[len(ns)//2]+ns[len(ns)//2-1])//2
    else:
        return ns[len(ns)//2]

s=list(map(int,input().strip().split()))
print(findmedian(findmode(s)))

#gpt
def find_modes(nums):
    frequency = {}
    for num in nums:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1
    max_freq = max(frequency.values())
    modes = [num for num, freq in frequency.items() if freq == max_freq]
    return modes

def calculate_median(nums):
    nums.sort()
    n = len(nums)
    if n % 2 == 0:
        return (nums[n // 2 - 1] + nums[n // 2]) / 2
    else:
        return nums[n // 2]

input_nums = list(map(int, input().split()))
modes = find_modes(input_nums)
median_of_modes = calculate_median(modes)
print(int(median_of_modes) if median_of_modes == int(median_of_modes) else median_of_modes)
